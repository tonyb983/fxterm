schema {
  query: Query
  mutation: Mutation
}

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
    "Included when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if`'argument is true."
directive @skip(
    "Skipped when true."
    if: Boolean!
  ) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Marks the field or enum value as deprecated"
directive @deprecated(
    "The reason for the deprecation"
    reason: String = "No longer supported"
  ) on FIELD_DEFINITION | ENUM_VALUE

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
    "The URL that specifies the behaviour of this scalar."
    url: String!
  ) on SCALAR

type Mutation {
  createNote(input: CreateNoteInput!): Note
  deleteNote(input: DeleteNoteInput!): Boolean!
  updateNote(input: UpdateNoteInput!): Note
}

"Representation of a single 'Note' object."
type Note {
  "The content of the Note. May be blank."
  content: String!
  "The LocalDateTime of when the Note was created."
  created: LocalDateTime!
  "The UUID of the Note."
  id: UUID!
  "The tags applied to the Note. May be empty but never null."
  tags: [String!]!
  "The title of the Note. May be blank."
  title: String!
  "The LocalDateTime of when the Note was last updated."
  updated: LocalDateTime!
}

type Query {
  findByContent(exact: Boolean, ignoreCase: Boolean, title: String!): [Note!]!
  findByTag(exact: Boolean, ignoreCase: Boolean, title: String!): [Note!]!
  findByText(ignoreCase: Boolean, title: String!): [Note!]!
  findByTitle(exact: Boolean, ignoreCase: Boolean, title: String!): [Note!]!
  getAllNotes: [Note!]!
  getById(id: UUID!): Note
  getNotesCreatedAfter(time: LocalDateTime!): [Note!]!
  getNotesCreatedBefore(time: LocalDateTime!): [Note!]!
  getNotesCreatedBetween(newer: LocalDateTime!, older: LocalDateTime!): [Note!]!
  getNotesUpdatedAfter(time: LocalDateTime!): [Note!]!
  getNotesUpdatedBefore(time: LocalDateTime!): [Note!]!
  getNotesUpdatedBetween(newer: LocalDateTime!, older: LocalDateTime!): [Note!]!
}

"A type representing a kotlinx.datetime.JavaTime serialized as an ISO String."
scalar LocalDateTime

"A type representing a formatted java.util.UUID"
scalar UUID

"The input required to create a new note. All fields are optional, if none are provided the new note will be created with an empty title, empty content, an empty tag array, and 'now' as the creation date."
input CreateNoteInput {
  content: String
  created: LocalDateTime
  tags: [String!]
  title: String
}

input DeleteNoteInput {
  id: UUID!
}

"The input required to update a note. All fields are optional except the ID which must pointto a valid note. If all other fields are blank the update will be ignored."
input UpdateNoteInput {
  content: String
  id: UUID!
  tags: [String!]
  title: String
}
